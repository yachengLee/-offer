测试用例
int main()
{
	vector<vector<int> > nums(4,vector<int>(4)); 
	int b[4][4] = {{0,1,2,2}, {1,3,8,8}, {1,5,9,11}, {4,6,12,15}};  
	for(int i = 0; i < 4; i++){  
		for(int j = 0; j < 4; j++){  
			nums[i][j] = b[i][j];  
		}  
	}  
	int num=kthSmall(nums,16);
	cout << num;
	system("pause");
	return 0;
}
查找指定值：
class Solution {
public:
    bool Find(int target, vector<vector<int> > array) {
        bool found=false;
        if(array.empty())
        {
            return false;
        }
        int rows = array.size();
        int cols = array[0].size();
        int row=0,col=cols-1;
        while(row<rows&&col>=0)
        {
            if(array[row][col]==target){
                found=true;
                break;
            }
            if(array[row][col]>target){
                col--;
            }
            else if(array[row][col]<target){
                row++;
            }
        }
        return found;
    }
};
查找第k小的值：最大最小堆
class Solution {  
public:  
    int kthSmall(vector<vector<int> > &matrix, int k) {  
        // write your code here  
        int n = matrix.size();  
        int m = matrix[0].size();  
        priority_queue<pair<int,pair<int,int> >,vector<pair<int,pair<int,int> > >,greater<pair<int,pair<int,int>> >> q;  
        map<pair<int,int>,bool> visited;  
        q.push(make_pair(matrix[0][0],make_pair(0,0)));  
        visited[make_pair(0,0)]=true;  
        while(k--)  
        {  
            pair<int,pair<int,int> > cur = q.top();  
            if(k==0)  
                return cur.first;  
            q.pop();  
            if(cur.second.first+1<n&&visited[make_pair(cur.second.first+1,cur.second.second)]==false)  
            {  
                q.push(make_pair(matrix[cur.second.first+1][cur.second.second],make_pair(cur.second.first+1,cur.second.second)));  
                visited[make_pair(cur.second.first+1,cur.second.second)]=true;  
            }  
            if(cur.second.second+1<m&&visited[make_pair(cur.second.first,cur.second.second+1)]==false)  
            {  
                q.push(make_pair(matrix[cur.second.first][cur.second.second+1],make_pair(cur.second.first,cur.second.second+1)));  
                visited[make_pair(cur.second.first,cur.second.second+1)]=true;  
            }  
        }  
    }  
};  

